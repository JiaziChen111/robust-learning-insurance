function [Q,gradQ]=QRU(x,Para,coeff,Q)

% This program computes the Value function for the ambiguity
%  case. It also computes the gradients
% v0 is the exante promised utility
% z_ is the state previous period
% These both are the state variables for the Optimization.
% c(1),c(2) are components of the consumption plan for z_1 and z_2
% bar_vstar_agent_1(z),bar_vstar_agent_2(z) are the means of the continuation
% plans conditioned on the reported state z. These are the meands with
% respect to the agent specific distoreted measure


% get components from x
c=x(1:2);
bar_vstar=x(3:4);

% get components from Para struc
pl=Para.pl;
ph=Para.ph;
ra=Para.ra;
beta=Para.beta;
y=Para.y;
Theta=Para.Theta;
theta_11=Theta(1,1);
theta_21=Theta(2,1);
%theta_agent,operator




lambdastar=-funeval(coeff,Q,bar_vstar',1);
Qstar=funeval(coeff,Q,bar_vstar',0);
% exp(-(u+beta Q*)/theta) for both the agents
U11=u(c(1),ra)+beta*Qstar(1);

ExpU11=exp(-(u(c(1),ra)+beta*Qstar(1))/theta_11);
ExpU12=exp(-(u(c(2),ra)+beta*Qstar(2))/theta_11);
ExpU21=exp(-(u(y-c(1),ra)+beta*bar_vstar(1))/theta_21);
ExpU22=exp(-(u(y-c(2),ra)+beta*bar_vstar(2))/theta_21);


% Mean of the exponentiated utility
MeanExp1=pl*(ExpU11)+ph*(ExpU12);

% this is negative of the time 0 utility for agent 1. Note that we have
% done the risk adjustem and applied a minus sign to the result
Q=theta_11*log(MeanExp1);


% Now we compute the disrtoted distribution for the computing the ex ante
% utilities for both agents
tilde_p0_agent_1(1)=pl*exp(ExpU11);
tilde_p0_agent_1(1)=1/(1+(pl/ph)*(exp()));

tilde_p0_agent_1(2)=ph*exp(ExpU12);
tilde_p0_agent_1=tilde_p0_agent_1./sum(tilde_p0_agent_1);


tilde_p0_agent_2(1)=pl*exp(ExpU21);
tilde_p0_agent_2(2)=ph*exp(ExpU22);
tilde_p0_agent_2=tilde_p0_agent_2./sum(tilde_p0_agent_2);        


% Lastly we compute the gradient of the value function with each of the
% control variable - c1,c2,v*_1(1),v*_1(2), v*_2(1) v*_2(2)


gradQ=-[der_u(c(1),ra)*tilde_p0_agent_1(1) der_u(c(2),ra)*tilde_p0_agent_1(2) -lambdastar(1)*beta*tilde_p0_agent_1(1) -beta*tilde_p0_agent_1(2)*lambdastar(2)];
if ~isreal(Q) || ~isreal(gradQ)
    Q=abs(Q)+100;
    gradQ=abs(gradQ)*1000;
end


